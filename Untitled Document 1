static void test(test_context *ctx)
{
  rtems_status_code sc;
  rtems_mode mode;

  sc = rtems_task_create(
    rtems_build_name('P', 'R', 'O', 'D'),
    RTEMS_MINIMUM_PRIORITY,
    RTEMS_MINIMUM_STACK_SIZE,
    RTEMS_DEFAULT_MODES,
    RTEMS_DEFAULT_ATTRIBUTES,
    &ctx->tasks[1]
  );
  rtems_test_assert(sc == RTEMS_SUCCESSFUL);

    sc = rtems_signal_catch(signal_handler, RTEMS_SIGNAL_6);
  rtems_test_assert(sc == RTEMS_SUCCESSFUL);

  sc = rtems_task_start(ctx->tasks[1], producer, (rtems_task_argument) ctx);
  rtems_test_assert(sc == RTEMS_SUCCESSFUL);
  for(int i=0; i < 100000; i++){
    PrintTaskInfo("FFF");
  }
  TaskRan[0] = true;
 /* Wait on all tasks to run*/
 while (1) {
   TestFinished = true;
   for ( int i=0; i < TASK_COUNT-1 ; i++ ) {

     if (TaskRan[i] == false)
       TestFinished = false;
   }
   if (TestFinished) {

     TEST_END();
     rtems_test_exit(0);
   }
 }
}






#define SEM_COUNT 2
#define CONFIGURE_MAXIMUM_SEMAPHORES SEM_COUNT


rtems_semaphore_create(
	rtems_build_name('P', 'U', 'M', 'P'),
	1,
	RTEMS_MULTIPROCESSOR_RESOURCE_SHARING | RTEMS_BINARY_SEMAPHORE,
	PRIORITY_CEILING,
	//variable to store id);

rtems_semaphore_create(
	rtems_build_name('C', 'H', '4', 'S'),
	1,
	RTEMS_MULTIPROCESSOR_RESOURCE_SHARING | RTEMS_BINARY_SEMAPHORE,
	PRIORITY_CEILING,
	//variable to store id);

rtems_semaphore_create(
	rtems_build_name('P', 'U', 'M', 'P'),
	1,
	RTEMS_MULTIPROCESSOR_RESOURCE_SHARING | RTEMS_BINARY_SEMAPHORE,
	PRIORITY_CEILING,
	//variable to store id);


